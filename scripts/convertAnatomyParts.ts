const fs = require('fs');
const path = require('path');

// Read input files
const bodyPartIds = JSON.parse(
  fs.readFileSync(path.join(__dirname, '../bodyPartIds.json'), 'utf8')
);

// Import bodyPartGroups directly from the file content
const bodyPartGroupsContent = fs.readFileSync(
  path.join(__dirname, '../src/app/config/bodyPartGroups.ts'),
  'utf8'
);

// Extract the bodyPartGroups object using regex
const bodyPartGroupsMatch = bodyPartGroupsContent.match(
  /export const bodyPartGroups[^=]+=\s*({[\s\S]+?});/
);
const bodyPartGroups = eval('(' + bodyPartGroupsMatch[1] + ')');

function convertToAnatomyParts(
  bodyPartIds: any[],
  bodyPartGroups: { [key: string]: any }
) {
  console.log('starting');
  const transformedGroups: { [key: string]: any } = {};

  // Iterate through each body part group
  for (const [groupKey, group] of Object.entries(bodyPartGroups)) {
    const transformedGroup = {
      ...group,
      ids: group.ids
        .map((id: string) => {
          // Find matching bodyPartId
          const bodyPart = bodyPartIds.find((part) => part.id === id);

          if (!bodyPart) {
            console.warn(`No matching body part found for ID: ${id}`);
            return null;
          }

          // Create AnatomyPart object
          return {
            objectId: bodyPart.id,
            name: bodyPart.name,
            description: '',
            available: true,
            shown: true,
            selected: false,
            parent: '',
            children: [],
          };
        })
        .filter(Boolean), // Remove null values
    };

    transformedGroups[groupKey] = transformedGroup;
  }

  // Format output
  const output = `// Generated by convertAnatomyParts.ts
import { BodyPartGroup } from '../types/anatomy';

export const bodyPartGroups: { [key: string]: BodyPartGroup } = ${JSON.stringify(
    transformedGroups,
    null,
    2
  )};
`;

  // Write to file
  fs.writeFileSync(
    path.join(__dirname, '../generated-body-part-groups.ts'),
    output
  );

  console.log('Successfully generated bodyPartGroups with AnatomyPart objects');
}

// Run the conversion
convertToAnatomyParts(bodyPartIds, bodyPartGroups);
